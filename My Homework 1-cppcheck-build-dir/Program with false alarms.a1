<?xml version="1.0"?>
<analyzerinfo checksum="4290649557">
        <error id="AssignmentIntegerToAddress" severity="portability" msg="Assigning an integer to a pointer is not portable." verbose="Assigning an integer (int/long/etc) to a pointer is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit integer to 32-bit pointer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="5" column="11"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;signed int *&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;signed int *&apos;." cwe="686">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="7" column="9"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;/&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="5" column="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="3" column="9"/>
            <symbol>a</symbol>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="5" column="15" info="Division by zero"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="908">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="5" column="13"/>
            <symbol>a</symbol>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: b" verbose="Uninitialized variable: b" cwe="908">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="6" column="10"/>
            <symbol>b</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;a&apos; is not assigned a value." verbose="Variable &apos;a&apos; is not assigned a value." cwe="665">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="3" column="9"/>
            <symbol>a</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;b&apos; is not assigned a value." verbose="Variable &apos;b&apos; is not assigned a value." cwe="665">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="3" column="13"/>
            <symbol>b</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;a&apos; is assigned a value that is never used." verbose="Variable &apos;a&apos; is assigned a value that is never used." cwe="563">
            <location file0="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" file="C:\Users\LiTho\Documents\Program Analyis Homework\Eseg HW Programs\Program with false alarms.c" line="18" column="7"/>
            <symbol>a</symbol>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="test_my_pointer" lineNumber="2"/>
    <functiondecl functionName="main" lineNumber="16"/>
    <functioncall functionName="a"/>
    <functioncall functionName="c"/>
    <functioncall functionName="if"/>
    <functioncall functionName="printf"/>
    <functioncall functionName="test_my_pointer"/>
  </FileInfo>
</analyzerinfo>
